{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { TRANSACTION_STORAGE_NAME, SHARED_TRANSACTION_STORAGE_NAME, ORIGINAL_URI_STORAGE_NAME, IDX_RESPONSE_STORAGE_NAME, TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME, PKCE_STORAGE_NAME, REDIRECT_OAUTH_PARAMS_NAME } from './constants.js';\nimport SavedObject from './SavedObject.js';\nimport { isBrowser } from './features.js';\nimport { warn } from './util/console.js';\nimport AuthSdkError from './errors/AuthSdkError.js';\n\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nclass StorageManager {\n  constructor(storageManagerOptions, cookieOptions, storageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  getOptionsForSection(sectionName, overrideOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n\n  getStorage(options) {\n    options = Object.assign({}, this.cookieOptions, options);\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let {\n      storageType,\n      storageTypes\n    } = options;\n\n    if (storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  getTransactionStorage(options) {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getSharedTansactionStorage(options) {\n    options = this.getOptionsForSection('shared-transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getOriginalUriStorage(options) {\n    options = this.getOptionsForSection('original-uri', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getIdxResponseStorage(options) {\n    let storage;\n\n    if (isBrowser()) {\n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      const transactionStorage = this.getTransactionStorage(options);\n\n      if (transactionStorage) {\n        storage = {\n          getItem: key => {\n            const transaction = transactionStorage.getStorage();\n\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: key => {\n            const transaction = transactionStorage.getStorage();\n\n            if (!transaction) {\n              return;\n            }\n\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n\n    if (!storage) {\n      return null;\n    }\n\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n\n  getTokenStorage(options) {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getHttpCache(options) {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyPKCEStorage(options) {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options) {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n}\n\nexport { StorageManager }; //# sourceMappingURL=StorageManager.js.map","map":null,"metadata":{},"sourceType":"module"}