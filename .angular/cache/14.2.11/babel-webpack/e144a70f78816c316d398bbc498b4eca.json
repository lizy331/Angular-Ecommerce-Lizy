{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from './errors/AuthSdkError.js';\nimport { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';\nimport { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';\nimport './idx/types/api.js';\nimport { warn } from './util/console.js';\nimport './myaccount/types.js';\nimport { isRawIdxResponse } from './idx/types/idx-js.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nclass TransactionManager {\n  constructor(options) {\n    this.storageManager = options.storageManager;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n\n  clear(options = {}) {\n    const transactionStorage = this.storageManager.getTransactionStorage();\n    const meta = transactionStorage.getStorage();\n    transactionStorage.clearStorage();\n\n    if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n      const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n\n      if (state) {\n        clearTransactionFromSharedStorage(this.storageManager, state);\n      }\n    }\n\n    if (options.clearIdxResponse !== false) {\n      this.clearIdxResponse();\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return;\n    }\n\n    if (options.oauth) {\n      this.clearLegacyOAuthParams();\n    }\n\n    if (options.pkce) {\n      this.clearLegacyPKCE();\n    }\n  }\n\n  save(meta, options = {}) {\n    let storage = this.storageManager.getTransactionStorage();\n    const obj = storage.getStorage();\n\n    if (isTransactionMeta(obj) && !options.muteWarning) {\n      warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n    }\n\n    storage.setStorage(meta);\n\n    if (this.enableSharedStorage && meta.state) {\n      saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n    }\n\n    if (!options.oauth) {\n      return;\n    }\n\n    if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n      const cookieStorage = this.storageManager.getStorage({\n        storageType: 'cookie'\n      });\n\n      if (this.saveParamsCookie) {\n        const {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        } = meta;\n        const oauthParams = {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        };\n        cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n      }\n\n      if (this.saveNonceCookie && meta.nonce) {\n        cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n      }\n\n      if (this.saveStateCookie && meta.state) {\n        cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n      }\n    }\n  }\n\n  exists(options = {}) {\n    try {\n      const meta = this.load(options);\n      return !!meta;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  load(options = {}) {\n    let meta;\n\n    if (this.enableSharedStorage && options.state) {\n      pruneSharedStorage(this.storageManager);\n      meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n    }\n\n    let storage = this.storageManager.getTransactionStorage();\n    meta = storage.getStorage();\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return null;\n    }\n\n    if (options.oauth) {\n      try {\n        const oauthParams = this.loadLegacyOAuthParams();\n        Object.assign(meta, oauthParams);\n      } finally {\n        this.clearLegacyOAuthParams();\n      }\n    }\n\n    if (options.pkce) {\n      try {\n        const pkceMeta = this.loadLegacyPKCE();\n        Object.assign(meta, pkceMeta);\n      } finally {\n        this.clearLegacyPKCE();\n      }\n    }\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n\n    return null;\n  }\n\n  clearLegacyPKCE() {\n    let storage;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyPKCE() {\n    let storage;\n    let obj;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      obj = storage.getStorage();\n\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      obj = storage.getStorage();\n\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n  }\n\n  clearLegacyOAuthParams() {\n    let storage;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyOAuthParams() {\n    let storage;\n    let oauthParams;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n  }\n\n  saveIdxResponse(data) {\n    if (!this.saveLastResponse) {\n      return;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n\n    if (!storage) {\n      return;\n    }\n\n    storage.setStorage(data);\n  }\n\n  loadIdxResponse(options) {\n    if (!this.saveLastResponse) {\n      return null;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n\n    if (!storage) {\n      return null;\n    }\n\n    const storedValue = storage.getStorage();\n\n    if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n      return null;\n    }\n\n    if (options) {\n      const {\n        stateHandle,\n        interactionHandle\n      } = options;\n\n      if (stateHandle && storedValue.stateHandle !== stateHandle) {\n        return null;\n      }\n\n      if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n        return null;\n      }\n    }\n\n    return storedValue;\n  }\n\n  clearIdxResponse() {\n    if (!this.saveLastResponse) {\n      return;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n    storage === null || storage === void 0 ? void 0 : storage.clearStorage();\n  }\n\n}\n\nexport { TransactionManager as default }; //# sourceMappingURL=TransactionManager.js.map","map":null,"metadata":{},"sourceType":"module"}