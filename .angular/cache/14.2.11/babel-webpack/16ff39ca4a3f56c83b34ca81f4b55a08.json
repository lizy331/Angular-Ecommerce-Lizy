{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { post } from '../http/request.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { STATE_TOKEN_KEY_NAME } from '../constants.js';\nimport { addStateToken } from './util.js';\n\nfunction transactionStatus(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, {\n    withCredentials: true\n  });\n}\n\nfunction resumeTransaction(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to resume'));\n    }\n  }\n\n  return sdk.tx.status(args).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nfunction introspectAuthn(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to evaluate'));\n    }\n  }\n\n  return transactionStep(sdk, args).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nfunction transactionStep(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, {\n    withCredentials: true\n  });\n}\n\nfunction transactionExists(sdk) {\n  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n}\n\nfunction postToTransaction(sdk, url, args, options) {\n  options = Object.assign({\n    withCredentials: true\n  }, options);\n  return post(sdk, url, args, options).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nexport { introspectAuthn, postToTransaction, resumeTransaction, transactionExists, transactionStatus, transactionStep }; //# sourceMappingURL=api.js.map","map":null,"metadata":{},"sourceType":"module"}